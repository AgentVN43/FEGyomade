import React, {
  useCallback,
  useContext,
  useEffect,
  useMemo,
  useState,
} from "react";
import { OverlayTrigger, Tooltip } from "react-bootstrap";
import { Tooltip as ReactTooltip } from "react-tooltip";
import { useParams } from "react-router-dom";
import CartContext, { useCart } from "../../../context/CartContext";
import SEO from "../../seo";
import SizeTutor from "../../sizetutor";
import { Helmet } from "react-helmet-async";
import CartDrawer from "../../cartDrawer";
import { Alert } from "antd";

export default function DetailProduct({ onAddToCart }) {
  const { slug } = useParams();
  const [productDetail, setProductDetail] = useState({});
  console.log("üöÄ ~ DetailProduct ~ productDetail:", productDetail);
  const [productVariants, setProductVariants] = useState([]);
  console.log("üöÄ ~ DetailProduct ~ productVariants:", productVariants);
  const [selectedSize, setSelectedSize] = useState(null);
  const [errorMessage, setErrorMessage] = useState("");
  const [hoveredSize, setHoveredSize] = useState(null);
  const [selectedColor, setSelectedColor] = useState();
  const [filteredData, setFilteredData] = useState([]);
  console.log("üöÄ ~ DetailProduct ~ filteredData:", filteredData);

  const [open, setOpen] = useState(false);

  const { addToCart } = useContext(CartContext);
  const { incrementQuantity, decrementQuantity, quantity } = useCart();
  console.log("üöÄ ~ DetailProduct ~ quantity:", quantity);

  // useEffect(() => {
  //   fetch(`https://gyomade.vn/mvc/products/variants/${slug}`)
  //     .then((response) => response.json())
  //     .then((data) => {
  //       const groupedData = {};
  //       data.forEach((item) => {
  //         const key = `${item.product_id}`;
  //         if (!groupedData[key]) {
  //           groupedData[key] = [];
  //         }
  //         groupedData[key].push(item);
  //       });
  //       const groupedArray = Object.values(groupedData);
  //       setProductVariants(groupedArray);
  //     })
  //     .catch((error) =>
  //       console.error("Error fetching product variants:", error)
  //     );
  //   fetch(`https://gyomade.vn/mvc/products/slug/${slug}`)
  //     .then((response) => response.json())
  //     .then((data) => setProductDetail(data))
  //     .catch((error) => console.error("Error fetching product detail:", error));
  // }, [slug]);

  useEffect(() => {
    const fetchProductData = async () => {
      try {
        // Fetch both product variants and product details in parallel
        const [variantsResponse, detailResponse] = await Promise.all([
          fetch(`https://gyomade.vn/mvc/products/variants/${slug}`),
          fetch(`https://gyomade.vn/mvc/products/slug/${slug}`),
        ]);

        // Parse the JSON data
        const [variantsData, detailData] = await Promise.all([
          variantsResponse.json(),
          detailResponse.json(),
        ]);

        // Group variants by product_id
        const groupedData = variantsData.reduce((acc, item) => {
          if (!acc[item.product_id]) {
            acc[item.product_id] = [];
          }
          acc[item.product_id].push(item);
          return acc;
        }, {});

        // Set state with grouped variants and product details
        setProductVariants(Object.values(groupedData));
        setProductDetail(detailData);
      } catch (error) {
        console.error("Error fetching product data:", error);
      }
    };

    if (slug) fetchProductData(); // Ensure slug is defined before fetching
  }, [slug]);

  useEffect(() => {
    if (productDetail.color) {
      handleColorSelect(productDetail.color);
    }
  }, [productDetail, productVariants]);

  const name = productDetail.name || "";
  const inventory = productDetail.inventory || 0;
  const display_id = productDetail.display_id || "";

  const price = useMemo(() => {
    return [...new Set(filteredData.flat().map((item) => item.price))];
  }, [filteredData]);

  const img = useMemo(() => {
    return [...new Set(productVariants.map((item) => item[0]?.images))];
  }, [productVariants]);

  const description2 = `H√£y ƒë·∫øn v·ªõi Gyo Made kh√°m ph√° m·∫´u ${name} c·ªßa ch√∫ng t√¥i. th·ªùi trang c√¥ng s∆°Ãâ Gyo Made chuy√™n v·ªÅ v√°y c√¥ng s·ªü, √°o thun, aÃÅo ki√™Ãâu, aÃÅo s∆° mi n·ªØ, ch√¢n vaÃÅy,....`;

  // const handleColorSelect = (color) => {
  //   console.log("üöÄ ~ handleColorSelect ~ color:", color);
  //   const order = ["XS", "S", "M", "L", "XL", "XXL", "XXXL"];

  //   setSelectedColor(color);
  //   const filtered = productVariants.map((array) =>
  //     array.filter((item) => item.color === color)
  //   );
  //   console.log("üöÄ ~ handleColorSelect ~ productVariants:", productVariants);

  //   const filtered1 = productVariants
  //     .flat()
  //     .filter((item) => item.color === color);
  //   console.log("üöÄ ~ handleColorSelect ~ filtered1:", filtered1);
  //   console.log("üöÄ ~ handleColorSelect ~ filtered:", filtered);
  //   const sorted = filtered1.sort(
  //     (a, b) => order.indexOf(a.size) - order.indexOf(b.size)
  //   );
  //   setFilteredData(sorted);
  //   // setFilteredData(filtered);
  //   setSelectedSize(null);
  // };

  const handleColorSelect = useCallback(
    (color) => {
      const order = ["XS", "S", "M", "L", "XL", "XXL", "XXXL"];
      setSelectedColor(color);

      const filteredItems = productVariants
        .flat()
        .filter((item) => item.color === color);

      const sortedItems = filteredItems.sort(
        (a, b) => order.indexOf(a.size) - order.indexOf(b.size)
      );

      setFilteredData(sortedItems);
      setSelectedSize(null);
    },
    [productVariants]
  );

  const clickSize = (size) => {
    setSelectedSize((prevSize) => (prevSize === size ? null : size));
    setErrorMessage("");
  };

  // const handleAddToCart = () => {
  //   if (!selectedColor || !selectedSize) {
  //     setErrorMessage("Vui ch·ªçn size!");
  //   } else {
  //     setErrorMessage("");
  //     const selectedItem = filteredData
  //       .flat()
  //       .find((item) => item.size === selectedSize);
  //     if (selectedItem) {
  //       const newItem = {
  //         product_id: selectedItem.product_id,
  //         variation_id: selectedItem.id,
  //         price: selectedItem.price,
  //         images: selectedItem.images,
  //         size: selectedItem.size,
  //         name: selectedItem.name,
  //         color: selectedColor,
  //       };
  //       addToCart(newItem, quantity);
  //       setOpen(true);
  //     } else {
  //       setErrorMessage("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p.");
  //     }
  //   }
  // };

  const handleAddToCart = () => {
    if (!selectedColor || !selectedSize) {
      setErrorMessage("Vui ch·ªçn size!");
      return;
    }

    const selectedItem = filteredData.find(
      (item) => item.size === selectedSize
    );

    if (selectedItem) {
      const newItem = {
        product_id: selectedItem.product_id,
        variation_id: selectedItem.id,
        price: selectedItem.price,
        images: selectedItem.images,
        size: selectedItem.size,
        name: selectedItem.name,
        color: selectedColor,
      };
      addToCart(newItem, quantity);
      setOpen(true);
    } else {
      setErrorMessage("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p.");
    }
  };

  const handleMouseEnter = (size) => setHoveredSize(size);

  const handleMouseLeave = () => setHoveredSize(null);

  const jsonLD = {
    "@context": "https://schema.org/",
    "@type": "Product",
    name: name,
    image: img,
    description:
      "Th·ªùi trang n·ªØ GYO MADE chuy√™n v·ªÅ v√°y c√¥ng s·ªü, √°o thun n·ªØ c√¥ng s·ªü. Li√™n t·ª•c c·∫≠p nh·∫≠t m·∫´u m·ªõi, thi·∫øt k·∫ø ƒë·ªôc quy·ªÅn. Qu·∫ßn t√¢y, v√°y n·ªØ ƒë·∫πp ki·ªÉu H√†n Qu·ªëc v·ªõi gi√° c·∫£ th√≠ch h·ª£p v·ªõi m·ªçi ƒë·ªëi t∆∞·ª£ng, giao h√†ng to√†n qu·ªëc.",
    brand: "GYO MADE",
    aggregateRating: {
      "@type": "AggregateRating",
      ratingValue: "5",
      bestRating: "5",
      worstRating: "4",
      ratingCount: "515",
    },
    sku: display_id,
  };

  return (
    <>
      <SEO
        title={`${name} - Th·ªùi trang c√¥ng s·ªü Gyo Made`}
        description={description2}
        keyword={name}
        name="GYOMADE"
        type="article"
        ogimage={img}
        ogurl={`/san-pham/${slug}`}
      />
      <Helmet>
        <script type="application/ld+json">{JSON.stringify(jsonLD)}</script>
      </Helmet>
      <div className="cs_single_product_details">
        <h1 className="cs_fs_37 cs_semibold">{name}</h1>
        {/* <div className="cs_single_product_review">
          <div className="cs_rating_container">
            <div className="cs_rating cs_size_sm" data-rating={5}>
              <div className="cs_rating_percentage" />
            </div>
          </div>
          <span>(5)</span>
          <span>
            Stock: <span className="cs_accent_color">{inventory}</span>
          </span>
        </div> */}
        <h4 className="cs_single_product_price cs_fs_21 cs_primary_color cs_semibold">
          {price.map((item) => item.toLocaleString())}
        </h4>
        <hr />
        <div className="cs_single_product_details_text">
          <ul className="mb-0">
            <li>
              H√¨nh ·∫£nh s·∫£n ph·∫©m l√† ·∫£nh th·∫≠t do shop t·ª± ch·ª•p v√† gi·ªØ b·∫£n quy·ªÅn
              h√¨nh ·∫£nh.
            </li>
            <li>ƒê·∫£m b·∫£o v·∫£i ch·∫•t l∆∞·ª£ng.</li>
            <li>
              S·∫£n ph·∫©m ƒë∆∞·ª£c ki·ªÉm tra kƒ© c√†ng, c·∫©n th·∫≠n v√† t∆∞ v·∫•n nhi·ªát t√¨nh
              tr∆∞·ªõc khi g√≥i h√†ng giao cho Qu√Ω Kh√°ch
            </li>
            <li>
              H√†ng c√≥ s·∫µn, giao h√†ng ngay khi nh·∫≠n ƒë∆∞·ª£c ƒë∆°n Giao h√†ng tr√™n to√†n
              qu·ªëc, nh·∫≠n h√†ng, ƒë·ªìng ki·ªÉm v√† thanh to√°n.
            </li>
          </ul>
        </div>
        <div className="cs_single_product_color ">
          <h4 className="cs_fs_16 cs_medium">M√†u:</h4>
          {productVariants.length > 0 && (
            <ul className="cs_color_filter_list cs_type_1 cs_mp0">
              {productVariants
                .map((array) =>
                  array.map((item) => ({
                    color: item.color,
                    hexCode: item.hex_code,
                  }))
                )
                .flat()
                .filter(
                  (value, index, self) =>
                    self.findIndex((v) => v.color === value.color) === index
                )
                .map(({ color, hexCode }, index) => (
                  <li key={color}>
                    <div className="cs_color_filter">
                      <input
                        type="radio"
                        name="color"
                        onClick={() => handleColorSelect(color, hexCode)}
                        defaultChecked={index === 0}
                      />
                      <span
                        className="cs_color_filter_circle cs_accent_bg"
                        style={{ backgroundColor: hexCode }}
                      />
                      <span className="cs_color_text">{color}</span>
                    </div>
                  </li>
                ))}
            </ul>
          )}
        </div>
        <div className="cs_single_product_size">
          <h4 className="cs_fs_16 cs_medium">Size:</h4>
          <ul
            className="cs_size_filter_list cs_mp0"
            onChange={handleMouseLeave}
          >
            {selectedColor && (
              <>
                {filteredData.flat().map((item) => (
                  <li
                    key={item.id}
                    data-tooltip-id={`tooltip-size-${item.id}`}
                    // onMouseEnter={() => handleMouseEnter(item.size)}
                  >
                    <input
                      type="radio"
                      name="size"
                      disabled={item.remain_quantity <= 0}
                      checked={selectedSize === item.size}
                      onChange={() => clickSize(item.size)}
                      onMouseEnter={() => handleMouseEnter(item.size)}
                      onMouseLeave={handleMouseLeave}
                    />
                    <span
                      className={item.remain_quantity <= 0 ? "disabled" : ""}
                      style={{
                        ...(selectedSize === item.size && {
                          borderColor: "#fc5f49",
                          backgroundColor: "#fc5f49",
                          color: "#fff",
                        }),
                        ...(item.remain_quantity <= 0 && {
                          border: "none",
                        }),
                      }}
                    >
                      {item.size}
                    </span>{" "}
                    <ReactTooltip
                      id={`tooltip-size-${item.id}`}
                      place="top"
                      variant="info"
                      content={` Size ${item.size} c√≤n:${" "} ${
                        item.remain_quantity
                      }${" "} c√°i`}
                    />
                  </li>
                ))}
              </>
            )}
          </ul>
          {errorMessage && (
            // <span style={{ color: "red", fontSize: "13px" }}>
            //   {errorMessage}
            // </span>
            <div style={{ paddingTop: "5px" }}>
              <Alert
                message="Vui l√≤ng ch·ªçn size ch·ªã y√™u nh√©!"
                type="error"
                showIcon
              />
            </div>
          )}
          <SizeTutor />
        </div>
        <div className="cs_action_btns">
          <div className="cs_quantity">
            <button
              className="cs_quantity_btn cs_increment"
              onClick={() => incrementQuantity()}
            >
              <i className="fa-solid fa-angle-up" />
            </button>
            <span className="cs_quantity_input">{quantity}</span>
            <button
              className="cs_quantity_btn cs_decrement"
              onClick={() => decrementQuantity()}
            >
              <i className="fa-solid fa-angle-down" />
            </button>
          </div>
          <button
            className="cs_btn cs_style_1 cs_fs_16 cs_medium"
            onClick={() => {
              handleAddToCart();
            }}
          >
            Th√™m v√†o gi·ªè h√†ng
          </button>
        </div>

        <CartDrawer open={open} setOpen={setOpen} cate={productDetail.category_name} />
      </div>
    </>
  );
}
